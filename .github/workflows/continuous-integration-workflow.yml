name: Continuous Integration
on: [push] # Will make the workflow run every time you push to any branch

jobs:
  build:
    name: Build and test
    runs-on: ubuntu-latest # Sets the build environment a machine with the latest Ubuntu installed
    steps:
      - uses: actions/checkout@v2 # Adds a step to checkout the repository code

      - name: Restore, Build, test
        uses: Elskom/build-dotnet@main
        with:
          TEST: true
          PACK: false

      - name: Typescript install
        run: npm install
        working-directory: ./DotnetTemplate.Web

      - name: Typescript lint
        run: npm run lint
        working-directory: ./DotnetTemplate.Web

      - name: Typescript test
        run: npm t
        working-directory: ./DotnetTemplate.Web

      - name: Report Status
        if: always()
        uses: ravsamhq/notify-slack-action@master
        with:
          status: ${{ job.status }}
          notification_title: '{job} has {status_message}'
          message_format: '{emoji} *{job}* {status_message} in <{repo_url}|{repo}>'
          footer: 'Linked Repo <{repo_url}|{repo}>'
          notify_when: 'failure,success'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  deploy:
    name: Deploy to Docker
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        if: success()
        uses: docker/setup-qemu-action@v1
      
      - name: Set up Docker Buildx
        if: success()
        uses: docker/setup-buildx-action@v1
      
      - name: Login to DockerHub
        if: success()
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push
        id: docker_build
        if: success()
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/dotnet-template:latest

      - name: Report Status
        if: always()
        uses: ravsamhq/notify-slack-action@master
        with:
          status: ${{ job.status }}
          notification_title: '{job} has {status_message}'
          message_format: '{emoji} *{job}* {status_message} in <{repo_url}|{repo}>'
          footer: 'Linked Repo <{repo_url}|{repo}>'
          notify_when: 'failure,success'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}